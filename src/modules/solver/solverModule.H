/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014 Johan Heyns - CSIR, South Africa

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.


Class
    Foam::solverModule

Description
    Abstract base-class for solvers.

See Also

SourceFiles
    solverModule.C

Authors
    Oliver Oxtoby
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef solverModule_H
#define solverModule_H

#include "typeInfo.H"
#include "autoPtr.H"
#include "runTimeSelectionTables.H"
#include "fvMesh.H"
#include "regIOobject.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// Forward declaration of classes
class Time;
class polyMesh;
class mapPolyMesh;
class fvMesh;
class solutionControl;

/*---------------------------------------------------------------------------*\
                       Class solverModule Declaration
\*---------------------------------------------------------------------------*/

class solverModule
    : public regIOobject
{
    // Private data

        //- Name
        const word name_;


    // Private Member Functions

        //- Disallow default bitwise copy construct
        solverModule(const solverModule&);

        //- Disallow default bitwise assignment
        void operator=(const solverModule&);


public:

    //- Runtime type information
    TypeName("solver");


    // Declare run-time constructor selection tables

        declareRunTimeSelectionTable
        (
            autoPtr,
            solverModule,
            dictionary,
            (const word& name, const Time& t, fvMesh& mesh, const dictionary& dict),
            (name, t, mesh, dict)
        );


    // Constructors

        //- Construct from components
        solverModule(const word& name, const fvMesh& mesh);

        //- Return clone
        autoPtr<solverModule> clone() const
        {
            NotImplemented;
            return autoPtr<solverModule>(nullptr);
        }

    // Selectors

        //- Select from dictionary, based on its "type" entry
        static autoPtr<solverModule> New
        (
            const word& name,
            const Time&,
            fvMesh&,
            const dictionary&
        );


    //- Destructor
    virtual ~solverModule();


    // Member Functions

        //- Name
        virtual const word& name() const;

        //- Should return the scaling factor desired (ratio between desired 
        // and current time step size)
        virtual scalar timeStepScaling(const scalar& maxCoNum) = 0;

        //- Called before time loop. Typically create mesh and fields here.
        virtual void initialise() = 0;

        //- Called before time is incremented
        virtual void preTimeIncrement() {}

        //- Called at the start of a time step
        virtual void beginTimeStep() = 0;

        //- Called for each outer ('pimple') iteration
        virtual void outerIteration() = 0;

        //- Should return the mesh created during initialise
        virtual fvMesh& mesh() = 0;

        //- Should return the solution control created during initialise
        virtual solutionControl& solnControl() = 0;

        //- Should return whether analysis is steady or transient. If steady,
        // time loop and outer iterations are one and the same.
        virtual bool steadyState() = 0;

        virtual bool inviscid() = 0;

        /// virtual function for regIOobject
        bool writeData(Ostream& os) const
        {
            return true;
        }
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
